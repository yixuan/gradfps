// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/gradfps.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// gradfps_prox_
List gradfps_prox_(MapMat S, MapMat x0, int d, double lambda, double lr, double mu, double r1, double r2, int maxiter, bool eig_spectra, int fan_maxinc, int fan_maxiter, double eps_abs, double eps_rel, int verbose);
RcppExport SEXP _gradfps_gradfps_prox_(SEXP SSEXP, SEXP x0SEXP, SEXP dSEXP, SEXP lambdaSEXP, SEXP lrSEXP, SEXP muSEXP, SEXP r1SEXP, SEXP r2SEXP, SEXP maxiterSEXP, SEXP eig_spectraSEXP, SEXP fan_maxincSEXP, SEXP fan_maxiterSEXP, SEXP eps_absSEXP, SEXP eps_relSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMat >::type S(SSEXP);
    Rcpp::traits::input_parameter< MapMat >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type eig_spectra(eig_spectraSEXP);
    Rcpp::traits::input_parameter< int >::type fan_maxinc(fan_maxincSEXP);
    Rcpp::traits::input_parameter< int >::type fan_maxiter(fan_maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps_abs(eps_absSEXP);
    Rcpp::traits::input_parameter< double >::type eps_rel(eps_relSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(gradfps_prox_(S, x0, d, lambda, lr, mu, r1, r2, maxiter, eig_spectra, fan_maxinc, fan_maxiter, eps_abs, eps_rel, verbose));
    return rcpp_result_gen;
END_RCPP
}
// gradfps_prox_benchmark_
List gradfps_prox_benchmark_(MapMat S, MapMat Pi, MapMat x0, int d, double lambda, double lr, double mu, double r1, double r2, int maxiter, bool eig_spectra, int fan_maxinc, int fan_maxiter, double eps_abs, double eps_rel, int verbose);
RcppExport SEXP _gradfps_gradfps_prox_benchmark_(SEXP SSEXP, SEXP PiSEXP, SEXP x0SEXP, SEXP dSEXP, SEXP lambdaSEXP, SEXP lrSEXP, SEXP muSEXP, SEXP r1SEXP, SEXP r2SEXP, SEXP maxiterSEXP, SEXP eig_spectraSEXP, SEXP fan_maxincSEXP, SEXP fan_maxiterSEXP, SEXP eps_absSEXP, SEXP eps_relSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMat >::type S(SSEXP);
    Rcpp::traits::input_parameter< MapMat >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< MapMat >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type eig_spectra(eig_spectraSEXP);
    Rcpp::traits::input_parameter< int >::type fan_maxinc(fan_maxincSEXP);
    Rcpp::traits::input_parameter< int >::type fan_maxiter(fan_maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps_abs(eps_absSEXP);
    Rcpp::traits::input_parameter< double >::type eps_rel(eps_relSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(gradfps_prox_benchmark_(S, Pi, x0, d, lambda, lr, mu, r1, r2, maxiter, eig_spectra, fan_maxinc, fan_maxiter, eps_abs, eps_rel, verbose));
    return rcpp_result_gen;
END_RCPP
}
// gradfps_prox_omd_
List gradfps_prox_omd_(MapMat S, MapMat x0, int d, double lambda, double delta, double lr, double mu, double r1, double r2, int maxiter, bool eig_spectra, int fan_maxinc, int fan_maxiter, double eps_abs, double eps_rel, int verbose);
RcppExport SEXP _gradfps_gradfps_prox_omd_(SEXP SSEXP, SEXP x0SEXP, SEXP dSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP lrSEXP, SEXP muSEXP, SEXP r1SEXP, SEXP r2SEXP, SEXP maxiterSEXP, SEXP eig_spectraSEXP, SEXP fan_maxincSEXP, SEXP fan_maxiterSEXP, SEXP eps_absSEXP, SEXP eps_relSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMat >::type S(SSEXP);
    Rcpp::traits::input_parameter< MapMat >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type eig_spectra(eig_spectraSEXP);
    Rcpp::traits::input_parameter< int >::type fan_maxinc(fan_maxincSEXP);
    Rcpp::traits::input_parameter< int >::type fan_maxiter(fan_maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps_abs(eps_absSEXP);
    Rcpp::traits::input_parameter< double >::type eps_rel(eps_relSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(gradfps_prox_omd_(S, x0, d, lambda, delta, lr, mu, r1, r2, maxiter, eig_spectra, fan_maxinc, fan_maxiter, eps_abs, eps_rel, verbose));
    return rcpp_result_gen;
END_RCPP
}
// gradfps_subgrad_
List gradfps_subgrad_(MapMat S, MapMat x0, int d, double lambda, double lr, double mu, double r1, double r2, int maxiter, double eps_abs, double eps_rel, int verbose);
RcppExport SEXP _gradfps_gradfps_subgrad_(SEXP SSEXP, SEXP x0SEXP, SEXP dSEXP, SEXP lambdaSEXP, SEXP lrSEXP, SEXP muSEXP, SEXP r1SEXP, SEXP r2SEXP, SEXP maxiterSEXP, SEXP eps_absSEXP, SEXP eps_relSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMat >::type S(SSEXP);
    Rcpp::traits::input_parameter< MapMat >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps_abs(eps_absSEXP);
    Rcpp::traits::input_parameter< double >::type eps_rel(eps_relSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(gradfps_subgrad_(S, x0, d, lambda, lr, mu, r1, r2, maxiter, eps_abs, eps_rel, verbose));
    return rcpp_result_gen;
END_RCPP
}
// gradfps_subgrad_benchmark_
List gradfps_subgrad_benchmark_(MapMat S, MapMat Pi, MapMat x0, int d, double lambda, double lr, double mu, double r1, double r2, int maxiter, double eps_abs, double eps_rel, int verbose);
RcppExport SEXP _gradfps_gradfps_subgrad_benchmark_(SEXP SSEXP, SEXP PiSEXP, SEXP x0SEXP, SEXP dSEXP, SEXP lambdaSEXP, SEXP lrSEXP, SEXP muSEXP, SEXP r1SEXP, SEXP r2SEXP, SEXP maxiterSEXP, SEXP eps_absSEXP, SEXP eps_relSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMat >::type S(SSEXP);
    Rcpp::traits::input_parameter< MapMat >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< MapMat >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps_abs(eps_absSEXP);
    Rcpp::traits::input_parameter< double >::type eps_rel(eps_relSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(gradfps_subgrad_benchmark_(S, Pi, x0, d, lambda, lr, mu, r1, r2, maxiter, eps_abs, eps_rel, verbose));
    return rcpp_result_gen;
END_RCPP
}
// prox_fantope
Rcpp::NumericMatrix prox_fantope(MapMat A, MapMat B, double alpha, int d, double eps, int inc, int maxiter, int verbose);
RcppExport SEXP _gradfps_prox_fantope(SEXP ASEXP, SEXP BSEXP, SEXP alphaSEXP, SEXP dSEXP, SEXP epsSEXP, SEXP incSEXP, SEXP maxiterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMat >::type A(ASEXP);
    Rcpp::traits::input_parameter< MapMat >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type inc(incSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_fantope(A, B, alpha, d, eps, inc, maxiter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// prox_lp
NumericVector prox_lp(NumericVector v, double p, double alpha, double eps, int maxiter, int verbose);
RcppExport SEXP _gradfps_prox_lp(SEXP vSEXP, SEXP pSEXP, SEXP alphaSEXP, SEXP epsSEXP, SEXP maxiterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_lp(v, p, alpha, eps, maxiter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// prox_lp_mat
NumericMatrix prox_lp_mat(NumericMatrix V, double p, double alpha, double eps, int maxiter, int verbose);
RcppExport SEXP _gradfps_prox_lp_mat(SEXP VSEXP, SEXP pSEXP, SEXP alphaSEXP, SEXP epsSEXP, SEXP maxiterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_lp_mat(V, p, alpha, eps, maxiter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// lambda_range
NumericVector lambda_range(MapMat S, int d, int act_size_min, int act_size_max);
RcppExport SEXP _gradfps_lambda_range(SEXP SSEXP, SEXP dSEXP, SEXP act_size_minSEXP, SEXP act_size_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMat >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type act_size_min(act_size_minSEXP);
    Rcpp::traits::input_parameter< int >::type act_size_max(act_size_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda_range(S, d, act_size_min, act_size_max));
    return rcpp_result_gen;
END_RCPP
}
// active_set
IntegerVector active_set(MapMat S, int d, double lambda);
RcppExport SEXP _gradfps_active_set(SEXP SSEXP, SEXP dSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMat >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(active_set(S, d, lambda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gradfps_gradfps_prox_", (DL_FUNC) &_gradfps_gradfps_prox_, 15},
    {"_gradfps_gradfps_prox_benchmark_", (DL_FUNC) &_gradfps_gradfps_prox_benchmark_, 16},
    {"_gradfps_gradfps_prox_omd_", (DL_FUNC) &_gradfps_gradfps_prox_omd_, 16},
    {"_gradfps_gradfps_subgrad_", (DL_FUNC) &_gradfps_gradfps_subgrad_, 12},
    {"_gradfps_gradfps_subgrad_benchmark_", (DL_FUNC) &_gradfps_gradfps_subgrad_benchmark_, 13},
    {"_gradfps_prox_fantope", (DL_FUNC) &_gradfps_prox_fantope, 8},
    {"_gradfps_prox_lp", (DL_FUNC) &_gradfps_prox_lp, 6},
    {"_gradfps_prox_lp_mat", (DL_FUNC) &_gradfps_prox_lp_mat, 6},
    {"_gradfps_lambda_range", (DL_FUNC) &_gradfps_lambda_range, 4},
    {"_gradfps_active_set", (DL_FUNC) &_gradfps_active_set, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_gradfps(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
